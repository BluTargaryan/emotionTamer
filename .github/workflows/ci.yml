name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  # Test React Native App
  test-app:
    name: Test React Native App
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run tests
      run: npm run test:ci
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: app
        name: app-coverage
        fail_ci_if_error: false

  # Test Server
  test-server:
    name: Test Email Server
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install server dependencies
      run: |
        cd server
        npm ci
        
    - name: Run server tests
      run: |
        cd server
        npm run test:ci
      env:
        NODE_ENV: test
        
    - name: Upload server coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: server
        name: server-coverage
        fail_ci_if_error: false

  # Build React Native App
  build-app:
    name: Build React Native App
    runs-on: ubuntu-latest
    needs: test-app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Expo CLI
      run: npm install -g @expo/cli
      
    - name: Build for web
      run: npx expo export -p web
      
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: dist/

  # Build and Test Server
  build-server:
    name: Build Email Server
    runs-on: ubuntu-latest
    needs: test-server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install server dependencies
      run: |
        cd server
        npm ci
        
    - name: Build server
      run: |
        cd server
        npm run build
        
    - name: Archive server build
      uses: actions/upload-artifact@v3
      with:
        name: server-build
        path: server/dist/

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Audit app dependencies
      run: npm audit --audit-level=high
      
    - name: Audit server dependencies
      run: |
        cd server
        npm audit --audit-level=high

  # Type Check
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install app dependencies
      run: npm ci
      
    - name: Type check app
      run: npx tsc --noEmit
      
    - name: Install server dependencies
      run: |
        cd server
        npm ci
        
    - name: Type check server
      run: |
        cd server
        npx tsc --noEmit

  # Deploy to Vercel (only on main branch)
  deploy-server:
    name: Deploy Server to Vercel
    runs-on: ubuntu-latest
    needs: [test-server, build-server]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./server 